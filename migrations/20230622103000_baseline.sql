-- Users table
create table if not exists public.users
(
  -- static columns
  id bigint not null generated by default as identity ( increment 1 start 1 minvalue 1 maxvalue 9223372036854775807 cache 1 ),
  open_issues bigint not null default 0,
  public_repos bigint not null default 0,
  public_gists bigint not null default 0,
  followers bigint not null default 0,
  following bigint not null default 0,
  role bigint not null default 10,
  display_local_time boolean not null default false,
  has_stars_data boolean not null default false,
  is_private boolean not null default false,
  is_open_sauced_member boolean not null default false,
  is_onboarded boolean not null default false,
  is_waitlisted boolean not null default false,
  hireable boolean not null default false,
  display_email boolean NOT NULL DEFAULT false,
  receive_collaboration boolean NOT NULL DEFAULT false,
  created_at timestamp without time zone not null default now(),
  updated_at timestamp without time zone not null default now(),
  deleted_at timestamp without time zone default null,
  last_fetched_users_at timestamp without time zone default to_timestamp(0),
  first_opened_pr_at timestamp without time zone default null,
  first_pushed_commit_at timestamp without time zone default null,
  connected_at timestamp without time zone default null,
  type character varying(20) collate pg_catalog."default" not null default 'User',

  -- elastic columns
  timezone character varying(50) COLLATE pg_catalog."default" NOT NULL DEFAULT 'UTC+1'::character varying,
  login character varying(255) collate pg_catalog."default" not null default '' unique,
  email character varying(255) collate pg_catalog."default" not null default '',
  bio character varying(255) collate pg_catalog."default" not null default '',
  name character varying(255) collate pg_catalog."default" not null default '',
  twitter_username character varying(15) collate pg_catalog."default" not null default '',
  company character varying(255) collate pg_catalog."default" not null default '',
  location character varying(255) collate pg_catalog."default" not null default '',
  node_id character varying(50) collate pg_catalog."default" not null default '',
  avatar_url character varying(255) collate pg_catalog."default" not null default '',
  gravatar_id character varying(255) collate pg_catalog."default" not null default '',
  url character varying(255) collate pg_catalog."default" not null default '',
  blog character varying(255) collate pg_catalog."default" not null default '',
  interests character varying(200) COLLATE pg_catalog."default" NOT NULL DEFAULT 'javascript'::character varying,
  languages jsonb default '{}' not null,
  linkedin_url character varying(255) collate pg_catalog."default" not null default '',
  github_sponsors_url character varying(255) collate pg_catalog."default" not null default '',

  -- dynamic columns
  constraint users_pkey primary key (id),
  constraint users_login_key unique (login)
)

tablespace pg_default;

-- indexes
create index if not exists users_idx_open_issues on public.users (open_issues);
create index if not exists users_idx_public_repos on public.users (public_repos);
create index if not exists users_idx_public_gists on public.users (public_gists);
create index if not exists users_idx_followers on public.users (followers);
create index if not exists users_idx_following on public.users (following);
create index if not exists users_idx_role on public.users (role);
create index if not exists users_idx_display_local_time on public.users (display_local_time);
create index if not exists users_idx_has_stars_data on public.users (has_stars_data);
create index if not exists users_idx_is_private on public.users (is_private);
create index if not exists users_idx_is_open_sauced_member on public.users (is_open_sauced_member);
create index if not exists users_idx_is_onboarded on public.users (is_onboarded);
create index if not exists users_idx_is_waitlisted on public.users (is_waitlisted);
create index if not exists users_idx_hireable on public.users (hireable);
create index if not exists users_idx_display_email on public.users (display_email);
create index if not exists users_idx_receive_collaboration on public.users (receive_collaboration);
create index if not exists users_idx_created_at on public.users (created_at);
create index if not exists users_idx_updated_at on public.users (updated_at);
create index if not exists users_idx_deleted_at on public.users (deleted_at);
create index if not exists users_idx_last_fetched_users_at on public.users (last_fetched_users_at);
create index if not exists users_idx_first_opened_pr_at on public.users (first_opened_pr_at);
create index if not exists users_idx_first_pushed_commit_at on public.users (first_pushed_commit_at);
create index if not exists users_idx_connected_at on public.users (connected_at);
create index if not exists users_idx_email on public.users (email);
create index if not exists users_idx_name on public.users (name);
create index if not exists users_idx_node_id on public.users (node_id);
create index if not exists users_idx_type on public.users (type);
create index if not exists users_idx_location on public.users (location);
create index if not exists users_idx_timezone on public.users (timezone);
create index if not exists users_idx_languages on public.users using gin (languages jsonb_path_ops);
create index if not exists users_idx_linkedin_url on public.users (linkedin_url);
create index if not exists users_idx_github_sponsors_url on public.users (github_sponsors_url);

-- Insert a "null" user into the table to be used by default
insert into public.users(id) values(0);

-- Repos table
create table if not exists public.repos
(
  -- static columns
  id bigint not null generated by default as identity ( increment 1 start 1 minvalue 1 maxvalue 9223372036854775807 cache 1 ),
  user_id bigint not null references public.users (id) on delete cascade on update cascade default 0,
  size bigint not null default 0,
  issues bigint not null default 0,
  stars bigint not null default 0,
  forks bigint not null default 0,
  watchers bigint not null default 0,
  subscribers bigint not null default 0,
  network bigint not null default 0,
  is_fork boolean not null default false,
  is_private boolean not null default false,
  is_template boolean not null default false,
  is_archived boolean not null default false,
  is_disabled boolean not null default false,
  has_issues boolean not null default true,
  has_projects boolean not null default true,
  has_downloads boolean not null default true,
  has_wiki boolean not null default true,
  has_pages boolean not null default true,
  has_discussions boolean not null default true,
  created_at timestamp without time zone not null default now(),
  updated_at timestamp without time zone not null default now(),
  deleted_at timestamp without time zone default null,
  pushed_at timestamp without time zone default now(),
  last_fetched_repos_at timestamp without time zone default to_timestamp(0),
  last_fetched_prs_at timestamp without time zone default to_timestamp(0),
  last_fetched_commits_at timestamp without time zone default to_timestamp(0),
  last_fetched_contributors_at timestamp without time zone default to_timestamp(0),

  -- elastic columns
  default_branch character varying(255) collate pg_catalog."default" not null default 'main',
  node_id character varying(255) collate pg_catalog."default" not null default '',
  git_url character varying(255) collate pg_catalog."default" not null default '',
  ssh_url character varying(255) collate pg_catalog."default" not null default '',
  clone_url character varying(255) collate pg_catalog."default" not null default '',
  svn_url character varying(255) collate pg_catalog."default" not null default '',
  mirror_url character varying(255) collate pg_catalog."default" not null default '',
  name character varying(255) collate pg_catalog."default",
  full_name character varying(255) collate pg_catalog."default",
  description text collate pg_catalog."default" not null default '',
  language character varying(64) collate pg_catalog."default" not null default '',
  license character varying(64) collate pg_catalog."default" not null default '',
  url character varying(255) collate pg_catalog."default" not null default '',
  homepage character varying(255) collate pg_catalog."default" not null default '',
  topics varchar[] not null default array[]::varchar[],

  -- dynamic columns
  constraint repos_pkey primary key (id)
)

tablespace pg_default;

-- indexes for repos
create index if not exists repos_idx_size on repos (size);
create index if not exists repos_idx_is_fork on repos (is_fork desc);
create index if not exists repos_idx_is_private on repos (is_private desc);
create index if not exists repos_idx_is_template on repos (is_template desc);
create index if not exists repos_idx_is_archived on repos (is_archived desc);
create index if not exists repos_idx_is_disabled on repos (is_disabled desc);
create index if not exists repos_idx_has_issues on repos (has_issues);
create index if not exists repos_idx_has_projects on repos (has_projects);
create index if not exists repos_idx_has_downloads on repos (has_downloads);
create index if not exists repos_idx_has_wiki on repos (has_wiki);
create index if not exists repos_idx_has_pages on repos (has_pages);
create index if not exists repos_idx_has_discussions on repos (has_discussions);
create index if not exists repos_idx_issues on repos (issues);
create index if not exists repos_idx_stars on repos (stars);
create index if not exists repos_idx_forks on repos (forks);
create index if not exists repos_idx_watchers on repos (watchers);
create index if not exists repos_idx_subscribers on repos (subscribers);
create index if not exists repos_idx_network on repos (network);
create index if not exists repos_idx_deleted_at on repos (deleted_at);
create index if not exists repos_idx_last_fetched_repos_at on repos (last_fetched_repos_at);
create index if not exists repos_idx_last_fetched_prs_at on repos (last_fetched_prs_at);
create index if not exists repos_idx_last_fetched_commits_at on repos (last_fetched_commits_at);
create index if not exists repos_idx_last_fetched_contributors_at on repos (last_fetched_contributors_at);
create index if not exists repos_idx_default_branch on repos (default_branch);
create index if not exists repos_idx_name on repos (name);
create index if not exists repos_idx_full_name on repos (full_name);
create index if not exists repos_idx_language on repos (language);
create index if not exists repos_idx_license on repos (license);
create index if not exists repos_idx_topics on repos (topics);

-- Commits table (unique to the pizza service)
create table if not exists public.commits (
  id bigint not null generated by default as identity ( increment 1 start 1 minvalue 1 maxvalue 9223372036854775807 cache 1 ),
  user_id bigint not null references public.users (id) on delete cascade on update cascade,
  repo_id bigint not null references public.repos (id) on delete cascade on update cascade,
  commit_hash text collate pg_catalog."default" not null default '',
  commit_date timestamp without time zone not null default now(),

  constraint commits_pkey primary key (id)
)

tablespace pg_default;

